package com.stc.apm.controllers;

/**
 * This class is generated by referring:
 * https://www.geeksforgeeks.org/spring-boot-3-0-jwt-authentication-with-spring-security-using-mysql-database/#
 */

import com.stc.apm.constants.MainConstants;
import com.stc.apm.models.AuthenticationRequest;
import com.stc.apm.models.UserSignUpRequest;
import com.stc.apm.services.ApmUserService;
import com.stc.apm.services.JwtService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class ApMUserController {

    private static final Logger logger = LoggerFactory.getLogger(ApMUserController.class.getName());

    @Autowired
    private ApmUserService apmUserService;

    @Autowired
    private JwtService jwtService;

    @Autowired
    private AuthenticationManager authenticationManager;

    @PostMapping("/addNewUser")
    public ResponseEntity<?> addNewUser(@RequestBody UserSignUpRequest userSignUpRequest) {
        logger.info("Request received at /addNewUser. userSignUpRequest: " + userSignUpRequest.toLogString());

        String operationStatus = apmUserService.saveUserToDatabase(userSignUpRequest);

        if (operationStatus.equalsIgnoreCase(MainConstants.MSG_SUCCESS)) {
            return ResponseEntity.status(HttpStatus.ACCEPTED).body(MainConstants.MSG_SUCCESS);
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(operationStatus);
        }
    }

    @PostMapping("/generateToken")
    public ResponseEntity<?> authenticateAndGetToken(@RequestBody AuthenticationRequest authenticationRequest, HttpServletResponse response) {
        logger.info("Request at /generateToken.");
        return apmUserService.generateToken(authenticationRequest, response, jwtService, authenticationManager);
    }

    @GetMapping("/logout")
    public ResponseEntity<?> logout(HttpServletRequest request, HttpServletResponse response) {

        logger.info("Calling /logout");
        try{
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {
                    cookie.setValue("");
                    cookie.setPath("/");
                    cookie.setMaxAge(0);
                    response.addCookie(cookie);
                }
            }
            logger.info("Cleared all cookies. Logout successful.");

        } catch (Exception exception) {
            logger.error("Failed to logout. " + exception.getMessage());
        }
        return ResponseEntity.status(HttpStatus.FOUND).header("Location", "/").body("");    }

    @PostMapping("/isUsernameAvailable")
    public ResponseEntity<?> isUsernameAvailable(@RequestBody UserSignUpRequest userSignUpRequest) {
        logger.info("Calling /isUsernameAvailable. userSignUpRequest: " + userSignUpRequest.toLogString());
        boolean operationStatus = apmUserService.isUsernameIsAvailable(userSignUpRequest);

        if (operationStatus == MainConstants.FLAG_SUCCESS) {
            return ResponseEntity.status(HttpStatus.OK).body(operationStatus);
        } else {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(operationStatus);
        }
    }
}
